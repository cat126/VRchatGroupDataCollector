// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace VRchatGroupDataCollector.Models;

public partial class postgresContext : DbContext
{
    public postgresContext()
    {
    }

    public postgresContext(DbContextOptions<postgresContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<Player> Players { get; set; }

    public virtual DbSet<PlayerActivity> PlayerActivities { get; set; }

    public virtual DbSet<WorldDatum> WorldData { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("events_pkey");

            entity.HasOne(d => d.WorlddataNavigation).WithMany(p => p.Events)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("WorldDataID");
        });

        modelBuilder.Entity<Player>(entity =>
        {
            entity.HasKey(e => e.PlayerId).HasName("Player_pkey");

            entity.Property(e => e.IsCurrentStaff).HasDefaultValue(false);
            entity.Property(e => e.IsFormerStaff).HasDefaultValue(false);
        });

        modelBuilder.Entity<PlayerActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PlayerActivity_pkey");

            entity.HasOne(d => d.Event).WithMany(p => p.PlayerActivities)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("eventID");

            entity.HasOne(d => d.Player).WithMany(p => p.PlayerActivities)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PlayerID");
        });

        modelBuilder.Entity<WorldDatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("worldData_pkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}